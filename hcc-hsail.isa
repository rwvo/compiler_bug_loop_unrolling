AMD HSA Code Object
  Version 1.0
HSAIL 
  Version: 1.0
  Profile: FULL  Machine model: LARGE  Default float rounding: NEAR
ISA
  Vendor AMD  Arch AMDGPU  Version 8:0:3
Producer 'AMD HSA Runtime Finalizer' Version 1:0
Producer options
  '-hsa_call_convention=0 -O2'

Segments (total 2):
  Segment (0)
    Type: GLOBAL_PROGRAM     Flags: 0x00000006
    Image Size: 64     Memory Size: 64     Align: 8     VAddr: 0
  Segment (1)
    Type: CODE_AGENT     Flags: 0x00000005
    Image Size: 948     Memory Size: 948     Align: 256     VAddr: 256

Data Sections (total 2):
  Section .hsadata_global_program (Index 4)
    Type: 1     Flags: 0x00100003
    Size:  64     Address: 0     Align: 8
    Data:
      0000000: 0000 0000 0000 0000 0000 0000 0000 0000  ................
      0000010: 0000 0000 0000 0000 0000 0000 0000 0000  ................
      0000020: 0000 0000 0000 0000 0000 0000 0000 0000  ................
      0000030: 0000 0000 0000 0000 0000 0000 0000 0000  ................
  Section .hsatext (Index 5)
    Type: 1     Flags: 0x00c00007
    Size:  948     Address: 256     Align: 256

Relocation Sections (total 0):

Symbols (total 9):
  Symbol &ZZ19matmul_sq_gpu_tiledPKfS0_PfmEN3_EC__019__cxxamp_trampolineEmS1_iiiiiiiiiiiiiS1_iiiiiiiiiiiiiS1_iiiiiiiiiiiii (Index 1):
    Section: .hsatext     Section Offset: 0
    VAddr: 256     Size: 948     Alignment: 256
    Kind: KERNEL     Linkage: PROGRAM     Definition: TRUE
  Symbol &signal_Xmalloc (Index 2):
    Section: .hsadata_global_program     Section Offset: 0
    VAddr: 0     Size: 8     Alignment: 8
    Kind: VARIABLE     Linkage: PROGRAM     Definition: TRUE
    Allocation: PROGRAM     Segment: GLOBAL     Constant: TRUE
  Symbol &signal_malloc (Index 3):
    Section: .hsadata_global_program     Section Offset: 8
    VAddr: 8     Size: 8     Alignment: 8
    Kind: VARIABLE     Linkage: PROGRAM     Definition: TRUE
    Allocation: PROGRAM     Segment: GLOBAL     Constant: TRUE
  Symbol &ptr_a_address (Index 4):
    Section: .hsadata_global_program     Section Offset: 16
    VAddr: 16     Size: 8     Alignment: 8
    Kind: VARIABLE     Linkage: PROGRAM     Definition: TRUE
    Allocation: PROGRAM     Segment: GLOBAL     Constant: TRUE
  Symbol &ptr_b_address (Index 5):
    Section: .hsadata_global_program     Section Offset: 24
    VAddr: 24     Size: 8     Alignment: 8
    Kind: VARIABLE     Linkage: PROGRAM     Definition: TRUE
    Allocation: PROGRAM     Segment: GLOBAL     Constant: TRUE
  Symbol &ptr_c_address (Index 6):
    Section: .hsadata_global_program     Section Offset: 32
    VAddr: 32     Size: 8     Alignment: 8
    Kind: VARIABLE     Linkage: PROGRAM     Definition: TRUE
    Allocation: PROGRAM     Segment: GLOBAL     Constant: TRUE
  Symbol &ptr_x_address (Index 7):
    Section: .hsadata_global_program     Section Offset: 40
    VAddr: 40     Size: 8     Alignment: 8
    Kind: VARIABLE     Linkage: PROGRAM     Definition: TRUE
    Allocation: PROGRAM     Segment: GLOBAL     Constant: TRUE
  Symbol &ptr_y_address (Index 8):
    Section: .hsadata_global_program     Section Offset: 48
    VAddr: 48     Size: 8     Alignment: 8
    Kind: VARIABLE     Linkage: PROGRAM     Definition: TRUE
    Allocation: PROGRAM     Segment: GLOBAL     Constant: TRUE
  Symbol &ptr_z_address (Index 9):
    Section: .hsadata_global_program     Section Offset: 56
    VAddr: 56     Size: 8     Alignment: 8
    Kind: VARIABLE     Linkage: PROGRAM     Definition: TRUE
    Allocation: PROGRAM     Segment: GLOBAL     Constant: TRUE

AMD Kernel Code for &ZZ19matmul_sq_gpu_tiledPKfS0_PfmEN3_EC__019__cxxamp_trampolineEmS1_iiiiiiiiiiiiiS1_iiiiiiiiiiiiiS1_iiiiiiiiiiiii: 
  amd_kernel_code_version_major                                = 1
  amd_kernel_code_version_minor                                = 1
  amd_machine_kind                                             = AMDGPU
  amd_machine_version_major                                    = 0
  amd_machine_version_minor                                    = 0
  amd_machine_version_stepping                                 = 0
  kernel_code_entry_byte_offset                                = 256
  max_scratch_backing_memory_byte_size                         = 0
  COMPUTE_PGM_RSRC1 (0xac008400):
    granulated_workitem_vgpr_count                             = 4
    granulated_wavefront_sgpr_count                            = 2
    priority                                                   = 0
    float_round_mode_32                                        = NEAREST_EVEN
    float_round_mode_16_64                                     = NEAREST_EVEN
    float_denorm_mode_32                                       = FLUSH_SOURCE_OUTPUT
    float_denorm_mode_16_64                                    = FLUSH_NONE
    enable_dx10_clamp                                          = TRUE
    enable_ieee_mode                                           = TRUE
  COMPUTE_PGM_RSRC2 (0x99000000):
    user_sgpr_count                                            = 8
    enable_sgpr_workgroup_id_x                                 = TRUE
    enable_sgpr_workgroup_id_y                                 = TRUE
    enable_vgpr_workitem_id                                    = X, Y
    granulated_lds_size                                        = 0
  KERNEL_CODE_PROPERTIES (0xa000b000):
    enable_sgpr_private_segment_buffer                         = TRUE
    enable_sgpr_dispatch_ptr                                   = TRUE
    enable_sgpr_kernarg_segment_ptr                            = TRUE
    private_element_size                                       = DWORD (4 bytes)
    is_ptr64                                                   = TRUE
  workgroup_group_segment_byte_size                            = 8192
  kernarg_segment_byte_size                                    = 208
  wavefront_sgpr_count                                         = 20
  workitem_vgpr_count                                          = 19
  kernarg_segment_alignment                                    = 16 (4)
  group_segment_alignment                                      = 16 (4)
  private_segment_alignment                                    = 16 (4)
  wavefront_size                                               = 64 (6)

Disassembly:
  asic(VI)
  type(CS)
  
  //
  // amd_kernel_code_t for &ZZ19matmul_sq_gpu_tiledPKfS0_PfmEN3_EC__019__cxxamp_trampolineEmS1_iiiiiiiiiiiiiS1_iiiiiiiiiiiiiS1_iiiiiiiiiiiii (000000000000 - 000000000100)
  //
  //
  // &ZZ19matmul_sq_gpu_tiledPKfS0_PfmEN3_EC__019__cxxamp_trampolineEmS1_iiiiiiiiiiiiiS1_iiiiiiiiiiiiiS1_iiiiiiiiiiiii:
  //
  s_load_dword  s0, s[4:5], 0x04                        // 000000000100: C0020002 00000004
  s_mov_b32     m0, 0x00010000                          // 000000000108: BEFC00FF 00010000
  s_waitcnt     lgkmcnt(0)                              // 000000000110: BF8C007F
  s_and_b32     s1, s0, 0x0000ffff                      // 000000000114: 8601FF00 0000FFFF
  s_bfe_u32     s0, s0, 0x00100010                      // 00000000011C: 9280FF00 00100010
  s_mul_i32     s1, s1, s8                              // 000000000124: 92010801
  v_add_u32     v2, vcc, s1, v0                         // 000000000128: 32040001
  s_mul_i32     s0, s0, s9                              // 00000000012C: 92000900
  v_add_u32     v3, vcc, s0, v1                         // 000000000130: 32060200
  s_load_dwordx2  s[0:1], s[6:7], 0x00                  // 000000000134: C0060003 00000000
  v_lshlrev_b64  v[4:5], 0, 0                           // 00000000013C: D28F0004 00010080
  s_waitcnt     lgkmcnt(0)                              // 000000000144: BF8C007F
  v_cmp_ne_i64  vcc, s[0:1], v[4:5]                     // 000000000148: 7DCA0800
  s_cbranch_vccz  label_00CE                            // 00000000014C: BF86007A
  s_load_dword  s2, s[6:7], 0x30                        // 000000000150: C0020083 00000030
  s_load_dword  s3, s[6:7], 0x28                        // 000000000158: C00200C3 00000028
  s_load_dword  s4, s[6:7], 0x38                        // 000000000160: C0020103 00000038
  s_load_dword  s5, s[6:7], 0x40                        // 000000000168: C0020143 00000040
  s_load_dword  s8, s[6:7], 0x78                        // 000000000170: C0020203 00000078
  s_load_dword  s9, s[6:7], 0x80                        // 000000000178: C0020243 00000080
  s_waitcnt     lgkmcnt(0)                              // 000000000180: BF8C007F
  v_add_u32     v4, vcc, s2, v3                         // 000000000184: 32080602
  v_lshlrev_b32  v5, 2, v0                              // 000000000188: 240A0082
  v_lshlrev_b32  v6, 7, v1                              // 00000000018C: 240C0287
  v_mul_lo_u32  v4, v4, s3                              // 000000000190: D2850004 00000704
  s_load_dwordx2  s[2:3], s[6:7], 0x08                  // 000000000198: C0060083 00000008
  s_load_dwordx2  s[10:11], s[6:7], 0x48                // 0000000001A0: C0060283 00000048
  s_load_dword  s12, s[6:7], 0x68                       // 0000000001A8: C0020303 00000068
  s_load_dword  s13, s[6:7], 0x70                       // 0000000001B0: C0020343 00000070
  v_add_u32     v7, vcc, s8, v2                         // 0000000001B8: 320E0408
  v_add_u32     v8, vcc, v6, v5                         // 0000000001BC: 32100B06
  v_add_u32     v5, vcc, 0x00000080, v5                 // 0000000001C0: 320A0AFF 00000080
  v_add_u32     v4, vcc, s4, v4                         // 0000000001C8: 32080804
  v_add_u32     v6, vcc, 0x00001004, v6                 // 0000000001CC: 320C0CFF 00001004
  s_ashr_i32    s4, s9, 31                              // 0000000001D4: 90049F09
  s_ashr_i32    s8, s5, 31                              // 0000000001D8: 90089F05
  v_mov_b32     v16, 0                                  // 0000000001DC: 7E200280
  s_movk_i32    s14, 0x0001                             // 0000000001E0: B00E0001
  s_movk_i32    s15, 0x0000                             // 0000000001E4: B00F0000
  v_mov_b32     v9, v1                                  // 0000000001E8: 7E120301
  label_007B:
  s_waitcnt     lgkmcnt(0)                              // 0000000001EC: BF8C007F
  v_add_u32     v10, vcc, s13, v9                       // 0000000001F0: 3214120D
  v_mul_lo_u32  v10, v10, s12                           // 0000000001F4: D285000A 0000190A
  v_add_u32     v11, vcc, v4, v0                        // 0000000001FC: 32160104
  v_add_u32     v10, vcc, v7, v10                       // 000000000200: 32141507
  v_ashrrev_i32  v12, 31, v11                           // 000000000204: 2218169F
  v_add_u32     v11, vcc, v11, s5                       // 000000000208: D1196A0B 00000B0B
  v_mov_b32     v13, s8                                 // 000000000210: 7E1A0208
  v_addc_u32    v12, vcc, v12, v13, vcc                 // 000000000214: 38181B0C
  v_ashrrev_i32  v13, 31, v10                           // 000000000218: 221A149F
  v_add_u32     v17, vcc, v10, s9                       // 00000000021C: D1196A11 0000130A
  v_mov_b32     v14, s4                                 // 000000000224: 7E1C0204
  v_addc_u32    v18, vcc, v13, v14, vcc                 // 000000000228: 38241D0D
  v_lshlrev_b64  v[11:12], 2, v[11:12]                  // 00000000022C: D28F000B 00021682
  v_lshlrev_b64  v[13:14], 2, v[17:18]                  // 000000000234: D28F000D 00022282
  v_add_u32     v10, vcc, s2, v11                       // 00000000023C: 32141602
  v_mov_b32     v11, s3                                 // 000000000240: 7E160203
  v_addc_u32    v11, vcc, v11, v12, vcc                 // 000000000244: 3816190B
  v_add_u32     v12, vcc, s10, v13                      // 000000000248: 32181A0A
  v_mov_b32     v13, s11                                // 00000000024C: 7E1A020B
  v_addc_u32    v13, vcc, v13, v14, vcc                 // 000000000250: 381A1D0D
  flat_load_dword  v10, v[10:11]                        // 000000000254: DC500000 0A00000A
  flat_load_dword  v11, v[12:13]                        // 00000000025C: DC500000 0B00000C
  s_waitcnt     vmcnt(0) & lgkmcnt(0)                   // 000000000264: BF8C0070
  ds_write2st64_b32  v8, v10, v11 offset0:16            // 000000000268: D81E0010 000B0A08
  s_waitcnt     lgkmcnt(0)                              // 000000000270: BF8C007F
  s_barrier                                             // 000000000274: BF8A0000
  v_mov_b32     v1, v6                                  // 000000000278: 7E020306
  v_mov_b32     v10, v5                                 // 00000000027C: 7E140305
  s_movk_i32    s16, 0x0020                             // 000000000280: B0100020
  s_movk_i32    s17, 0x0000                             // 000000000284: B0110000
  s_nop         0x0000                                  // 000000000288: BF800000
  s_nop         0x0000                                  // 00000000028C: BF800000
  s_nop         0x0000                                  // 000000000290: BF800000
  s_nop         0x0000                                  // 000000000294: BF800000
  s_nop         0x0000                                  // 000000000298: BF800000
  s_nop         0x0000                                  // 00000000029C: BF800000
  label_00A8:
  v_add_u32     v12, vcc, 0xffffff80, v10               // 0000000002A0: 321814FF FFFFFF80
  v_add_u32     v13, vcc, -4, v1                        // 0000000002A8: 321A02C4
  ds_read_b32   v12, v12                                // 0000000002AC: D86C0000 0C00000C
  ds_read_b32   v13, v13                                // 0000000002B4: D86C0000 0D00000D
  ds_read_b32   v14, v10                                // 0000000002BC: D86C0000 0E00000A
  ds_read_b32   v15, v1                                 // 0000000002C4: D86C0000 0F000001
  s_waitcnt     lgkmcnt(2)                              // 0000000002CC: BF8C027F
  v_mad_f32     v11, v13, v12, v16                      // 0000000002D0: D1C1000B 0442190D
  s_waitcnt     lgkmcnt(0)                              // 0000000002D8: BF8C007F
  v_mad_f32     v16, v15, v14, v11                      // 0000000002DC: D1C10010 042E1D0F
  v_add_u32     v10, vcc, 0x00000100, v10               // 0000000002E4: 321414FF 00000100
  v_add_u32     v1, vcc, 8, v1                          // 0000000002EC: 32020288
  s_add_u32     s16, s16, -2                            // 0000000002F0: 8010C210
  s_addc_u32    s17, s17, -1                            // 0000000002F4: 8211C111
  v_lshlrev_b64  v[12:13], 0, 0                         // 0000000002F8: D28F000C 00010080
  v_cmp_eq_i64  vcc, s[16:17], v[12:13]                 // 000000000300: 7DC41810
  s_cbranch_vccnz  label_00C3                           // 000000000304: BF870001
  s_branch      label_00A8                              // 000000000308: BF82FFE5
  label_00C3:
  s_barrier                                             // 00000000030C: BF8A0000
  v_lshlrev_b64  v[12:13], 0, s[0:1]                    // 000000000310: D28F000C 00000080
  v_cmp_eq_i64  vcc, s[14:15], v[12:13]                 // 000000000318: 7DC4180E
  s_cbranch_vccnz  label_00CF                           // 00000000031C: BF870007
  s_add_u32     s14, s14, 1                             // 000000000320: 800E810E
  s_addc_u32    s15, s15, 0                             // 000000000324: 820F800F
  v_add_u32     v0, vcc, 32, v0                         // 000000000328: 320000A0
  v_add_u32     v9, vcc, 32, v9                         // 00000000032C: 321212A0
  s_branch      label_007B                              // 000000000330: BF82FFAE
  s_branch      label_00CF                              // 000000000334: BF820001
  label_00CE:
  v_mov_b32     v16, 0                                  // 000000000338: 7E200280
  label_00CF:
  s_load_dword  s0, s[6:7], 0xc0                        // 00000000033C: C0020003 000000C0
  s_load_dword  s1, s[6:7], 0xb8                        // 000000000344: C0020043 000000B8
  s_load_dword  s2, s[6:7], 0xb0                        // 00000000034C: C0020083 000000B0
  s_load_dword  s3, s[6:7], 0xa8                        // 000000000354: C00200C3 000000A8
  s_load_dwordx2  s[4:5], s[6:7], 0x88                  // 00000000035C: C0060103 00000088
  s_waitcnt     lgkmcnt(0)                              // 000000000364: BF8C007F
  v_add_u32     v1, vcc, s1, v2                         // 000000000368: 32020401
  v_add_u32     v2, vcc, s2, v3                         // 00000000036C: 32040602
  v_mul_lo_u32  v2, v2, s3                              // 000000000370: D2850002 00000702
  v_add_u32     v1, vcc, v1, v2                         // 000000000378: 32020501
  v_ashrrev_i32  v2, 31, v1                             // 00000000037C: 2204029F
  s_ashr_i32    s1, s0, 31                              // 000000000380: 90019F00
  v_add_u32     v1, vcc, v1, s0                         // 000000000384: D1196A01 00000101
  v_mov_b32     v3, s1                                  // 00000000038C: 7E060201
  v_addc_u32    v2, vcc, v2, v3, vcc                    // 000000000390: 38040702
  v_lshlrev_b64  v[1:2], 2, v[1:2]                      // 000000000394: D28F0001 00020282
  v_add_u32     v1, vcc, s4, v1                         // 00000000039C: 32020204
  v_mov_b32     v3, s5                                  // 0000000003A0: 7E060205
  v_addc_u32    v2, vcc, v3, v2, vcc                    // 0000000003A4: 38040503
  flat_store_dword  v[1:2], v16                         // 0000000003A8: DC700000 00001001
  s_endpgm                                              // 0000000003B0: BF810000
end

AMD HSA Code Object End

